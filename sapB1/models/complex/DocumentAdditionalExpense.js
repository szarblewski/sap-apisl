const DocExpenseTaxJurisdiction = require("./DocExpenseTaxJurisdiction");


class DocumentAdditionalExpense {
    constructor() {
        this.ExpenseCode = new Number();
        this.LineTotal = new Number();
        this.LineTotalFC = new Number();
        this.LineTotalSys = new Number();
        this.PaidToDate = new Number();
        this.PaidToDateFC = new Number();
        this.PaidToDateSys = new Number();
        this.Remarks = new String();
        this.DistributionMethod = new String();
        this.TaxLiable = new String();
        this.VatGroup = new String();
        this.TaxPercent = new Number();
        this.TaxSum = new Number();
        this.TaxSumFC = new Number();
        this.TaxSumSys = new Number();
        this.DeductibleTaxSum = new Number();
        this.DeductibleTaxSumFC = new Number();
        this.DeductibleTaxSumSys = new Number();
        this.AquisitionTax = new String();
        this.TaxCode = new String();
        this.TaxType = new String();
        this.TaxPaid = new Number();
        this.TaxPaidFC = new Number();
        this.TaxPaidSys = new Number();
        this.EqualizationTaxPercent = new Number();
        this.EqualizationTaxSum = new Number();
        this.EqualizationTaxFC = new Number();
        this.EqualizationTaxSys = new Number();
        this.TaxTotalSum = new Number();
        this.TaxTotalSumFC = new Number();
        this.TaxTotalSumSys = new Number();
        this.BaseDocEntry = new Number();
        this.BaseDocLine = new Number();
        this.BaseDocType = new Number();
        this.BaseDocumentReference = new Number();
        this.LineNum = new Number();
        this.LastPurchasePrice = new String();
        this.Status = new String();
        this.Stock = new String();
        this.TargetAbsEntry = new Number();
        this.TargetType = new Number();
        this.WTLiable = new String();
        this.DistributionRule = new String();
        this.Project = new String();
        this.DistributionRule2 = new String();
        this.DistributionRule3 = new String();
        this.DistributionRule4 = new String();
        this.DistributionRule5 = new String();
        this.LineGross = new Number();
        this.LineGrossSys = new Number();
        this.LineGrossFC = new Number();
        this.ExternalCalcTaxRate = new Number();
        this.ExternalCalcTaxAmount = new Number();
        this.ExternalCalcTaxAmountFC = new Number();
        this.ExternalCalcTaxAmountSC = new Number();
        this.DocExpenseTaxJurisdictions = [DocExpenseTaxJurisdiction];
    }
    ExpenseCode;
    LineTotal;
    LineTotalFC;
    LineTotalSys;
    PaidToDate;
    PaidToDateFC;
    PaidToDateSys;
    Remarks;
    DistributionMethod;
    TaxLiable;
    VatGroup;
    TaxPercent;
    TaxSum;
    TaxSumFC;
    TaxSumSys;
    DeductibleTaxSum;
    DeductibleTaxSumFC;
    DeductibleTaxSumSys;
    AquisitionTax;
    TaxCode;
    TaxType;
    TaxPaid;
    TaxPaidFC;
    TaxPaidSys;
    EqualizationTaxPercent;
    EqualizationTaxSum;
    EqualizationTaxFC;
    EqualizationTaxSys;
    TaxTotalSum;
    TaxTotalSumFC;
    TaxTotalSumSys;
    BaseDocEntry;
    BaseDocLine;
    BaseDocType;
    BaseDocumentReference;
    LineNum;
    LastPurchasePrice;
    Status;
    Stock;
    TargetAbsEntry;
    TargetType;
    WTLiable;
    DistributionRule;
    Project;
    DistributionRule2;
    DistributionRule3;
    DistributionRule4;
    DistributionRule5;
    LineGross;
    LineGrossSys;
    LineGrossFC;
    ExternalCalcTaxRate;
    ExternalCalcTaxAmount;
    ExternalCalcTaxAmountFC;
    ExternalCalcTaxAmountSC;
    DocExpenseTaxJurisdictions;
}

module.exports = DocumentAdditionalExpense;