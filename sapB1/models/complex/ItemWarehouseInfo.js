const ItemCycleCount = require("./ItemCycleCount");


class ItemWarehouseInfo {
    constructor() {
        this.MinimalStock = new Number();
        this.MaximalStock = new Number();
        this.MinimalOrder = new Number();
        this.StandardAveragePrice = new Number();
        this.Locked = new String();
        this.InventoryAccount = new String();
        this.CostAccount = new String();
        this.TransferAccount = new String();
        this.RevenuesAccount = new String();
        this.VarienceAccount = new String();
        this.DecreasingAccount = new String();
        this.IncreasingAccount = new String();
        this.ReturningAccount = new String();
        this.ExpensesAccount = new String();
        this.EURevenuesAccount = new String();
        this.EUExpensesAccount = new String();
        this.ForeignRevenueAcc = new String();
        this.ForeignExpensAcc = new String();
        this.ExemptIncomeAcc = new String();
        this.PriceDifferenceAcc = new String();
        this.WarehouseCode = new String();
        this.InStock = new Number();
        this.Committed = new Number();
        this.Ordered = new Number();
        this.CountedQuantity = new Number();
        this.WasCounted = new String();
        this.UserSignature = new Number();
        this.Counted = new Number();
        this.ExpenseClearingAct = new String();
        this.PurchaseCreditAcc = new String();
        this.EUPurchaseCreditAcc = new String();
        this.ForeignPurchaseCreditAcc = new String();
        this.SalesCreditAcc = new String();
        this.SalesCreditEUAcc = new String();
        this.ExemptedCredits = new String();
        this.SalesCreditForeignAcc = new String();
        this.ExpenseOffsettingAccount = new String();
        this.WipAccount = new String();
        this.ExchangeRateDifferencesAcct = new String();
        this.GoodsClearingAcct = new String();
        this.NegativeInventoryAdjustmentAccount = new String();
        this.CostInflationOffsetAccount = new String();
        this.GLDecreaseAcct = new String();
        this.GLIncreaseAcct = new String();
        this.PAReturnAcct = new String();
        this.PurchaseAcct = new String();
        this.PurchaseOffsetAcct = new String();
        this.ShippedGoodsAccount = new String();
        this.StockInflationOffsetAccount = new String();
        this.StockInflationAdjustAccount = new String();
        this.VATInRevenueAccount = new String();
        this.WipVarianceAccount = new String();
        this.CostInflationAccount = new String();
        this.WHIncomingCenvatAccount = new String();
        this.WHOutgoingCenvatAccount = new String();
        this.StockInTransitAccount = new String();
        this.WipOffsetProfitAndLossAccount = new String();
        this.InventoryOffsetProfitAndLossAccount = new String();
        this.DefaultBin = new Number();
        this.DefaultBinEnforced = new String();
        this.PurchaseBalanceAccount = new String();
        this.ItemCode = new String();
        this.ItemCycleCounts = [ItemCycleCount];
    }
    MinimalStock;
    MaximalStock;
    MinimalOrder;
    StandardAveragePrice;
    Locked;
    InventoryAccount;
    CostAccount;
    TransferAccount;
    RevenuesAccount;
    VarienceAccount;
    DecreasingAccount;
    IncreasingAccount;
    ReturningAccount;
    ExpensesAccount;
    EURevenuesAccount;
    EUExpensesAccount;
    ForeignRevenueAcc;
    ForeignExpensAcc;
    ExemptIncomeAcc;
    PriceDifferenceAcc;
    WarehouseCode;
    InStock;
    Committed;
    Ordered;
    CountedQuantity;
    WasCounted;
    UserSignature;
    Counted;
    ExpenseClearingAct;
    PurchaseCreditAcc;
    EUPurchaseCreditAcc;
    ForeignPurchaseCreditAcc;
    SalesCreditAcc;
    SalesCreditEUAcc;
    ExemptedCredits;
    SalesCreditForeignAcc;
    ExpenseOffsettingAccount;
    WipAccount;
    ExchangeRateDifferencesAcct;
    GoodsClearingAcct;
    NegativeInventoryAdjustmentAccount;
    CostInflationOffsetAccount;
    GLDecreaseAcct;
    GLIncreaseAcct;
    PAReturnAcct;
    PurchaseAcct;
    PurchaseOffsetAcct;
    ShippedGoodsAccount;
    StockInflationOffsetAccount;
    StockInflationAdjustAccount;
    VATInRevenueAccount;
    WipVarianceAccount;
    CostInflationAccount;
    WHIncomingCenvatAccount;
    WHOutgoingCenvatAccount;
    StockInTransitAccount;
    WipOffsetProfitAndLossAccount;
    InventoryOffsetProfitAndLossAccount;
    DefaultBin;
    DefaultBinEnforced;
    PurchaseBalanceAccount;
    ItemCode;
    ItemCycleCounts;
}

module.exports = ItemWarehouseInfo;