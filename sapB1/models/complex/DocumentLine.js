const BatchNumber = require("./BatchNumber");
const DocumentLineAdditionalExpense = require("./DocumentLineAdditionalExpense");
const DocumentLinesBinAllocation = require("./DocumentLinesBinAllocation");
const GeneratedAsset = require("./GeneratedAsset");
const LineTaxJurisdiction = require("./LineTaxJurisdiction");
const SerialNumber = require("./SerialNumber");
const WithholdingTaxLine = require("./WithholdingTaxLine");


class DocumentLine {
    constructor() {
        this.LineNum = new Number();
        this.ItemCode = new String();
        this.ItemDescription = new String();
        this.Quantity = new Number();
        this.ShipDate = new String();
        this.Price = new Number();
        this.PriceAfterVAT = new Number();
        this.Currency = new String();
        this.Rate = new Number();
        this.DiscountPercent = new Number();
        this.VendorNum = new String();
        this.SerialNum = new String();
        this.WarehouseCode = new String();
        this.SalesPersonCode = new Number();
        this.CommisionPercent = new Number();
        this.TreeType = new String();
        this.AccountCode = new String();
        this.UseBaseUnits = new String();
        this.SupplierCatNum = new String();
        this.CostingCode = new String();
        this.ProjectCode = new String();
        this.BarCode = new String();
        this.VatGroup = new String();
        this.Height1 = new Number();
        this.Hight1Unit = new Number();
        this.Height2 = new Number();
        this.Height2Unit = new Number();
        this.Lengh1 = new Number();
        this.Lengh1Unit = new Number();
        this.Lengh2 = new Number();
        this.Lengh2Unit = new Number();
        this.Weight1 = new Number();
        this.Weight1Unit = new Number();
        this.Weight2 = new Number();
        this.Weight2Unit = new Number();
        this.Factor1 = new Number();
        this.Factor2 = new Number();
        this.Factor3 = new Number();
        this.Factor4 = new Number();
        this.BaseType = new Number();
        this.BaseEntry = new Number();
        this.BaseLine = new Number();
        this.Volume = new Number();
        this.VolumeUnit = new Number();
        this.Width1 = new Number();
        this.Width1Unit = new Number();
        this.Width2 = new Number();
        this.Width2Unit = new Number();
        this.Address = new String();
        this.TaxCode = new String();
        this.TaxType = new String();
        this.TaxLiable = new String();
        this.PickStatus = new String();
        this.PickQuantity = new Number();
        this.PickListIdNumber = new Number();
        this.OriginalItem = new String();
        this.BackOrder = new String();
        this.FreeText = new String();
        this.ShippingMethod = new Number();
        this.POTargetNum = new Number();
        this.POTargetEntry = new String();
        this.POTargetRowNum = new Number();
        this.CorrectionInvoiceItem = new String();
        this.CorrInvAmountToStock = new Number();
        this.CorrInvAmountToDiffAcct = new Number();
        this.AppliedTax = new Number();
        this.AppliedTaxFC = new Number();
        this.AppliedTaxSC = new Number();
        this.WTLiable = new String();
        this.DeferredTax = new String();
        this.EqualizationTaxPercent = new Number();
        this.TotalEqualizationTax = new Number();
        this.TotalEqualizationTaxFC = new Number();
        this.TotalEqualizationTaxSC = new Number();
        this.NetTaxAmount = new Number();
        this.NetTaxAmountFC = new Number();
        this.NetTaxAmountSC = new Number();
        this.MeasureUnit = new String();
        this.UnitsOfMeasurment = new Number();
        this.LineTotal = new Number();
        this.TaxPercentagePerRow = new Number();
        this.TaxTotal = new Number();
        this.ConsumerSalesForecast = new String();
        this.ExciseAmount = new Number();
        this.TaxPerUnit = new Number();
        this.TotalInclTax = new Number();
        this.CountryOrg = new String();
        this.SWW = new String();
        this.TransactionType = new String();
        this.DistributeExpense = new String();
        this.RowTotalFC = new Number();
        this.RowTotalSC = new Number();
        this.LastBuyInmPrice = new Number();
        this.LastBuyDistributeSumFc = new Number();
        this.LastBuyDistributeSumSc = new Number();
        this.LastBuyDistributeSum = new Number();
        this.StockDistributesumForeign = new Number();
        this.StockDistributesumSystem = new Number();
        this.StockDistributesum = new Number();
        this.StockInmPrice = new Number();
        this.PickStatusEx = new String();
        this.TaxBeforeDPM = new Number();
        this.TaxBeforeDPMFC = new Number();
        this.TaxBeforeDPMSC = new Number();
        this.CFOPCode = new String();
        this.CSTCode = new String();
        this.Usage = new Number();
        this.TaxOnly = new String();
        this.VisualOrder = new Number();
        this.BaseOpenQuantity = new Number();
        this.UnitPrice = new Number();
        this.LineStatus = new String();
        this.PackageQuantity = new Number();
        this.Text = new String();
        this.LineType = new String();
        this.COGSCostingCode = new String();
        this.COGSAccountCode = new String();
        this.ChangeAssemlyBoMWarehouse = new String();
        this.GrossBuyPrice = new Number();
        this.GrossBase = new Number();
        this.GrossProfitTotalBasePrice = new Number();
        this.CostingCode2 = new String();
        this.CostingCode3 = new String();
        this.CostingCode4 = new String();
        this.CostingCode5 = new String();
        this.ItemDetails = new String();
        this.LocationCode = new Number();
        this.ActualDeliveryDate = new String();
        this.RemainingOpenQuantity = new Number();
        this.OpenAmount = new Number();
        this.OpenAmountFC = new Number();
        this.OpenAmountSC = new Number();
        this.ExLineNo = new String();
        this.RequiredDate = new String();
        this.RequiredQuantity = new Number();
        this.COGSCostingCode2 = new String();
        this.COGSCostingCode3 = new String();
        this.COGSCostingCode4 = new String();
        this.COGSCostingCode5 = new String();
        this.CSTforIPI = new String();
        this.CSTforPIS = new String();
        this.CSTforCOFINS = new String();
        this.CreditOriginCode = new String();
        this.WithoutInventoryMovement = new String();
        this.AgreementNo = new Number();
        this.AgreementRowNumber = new Number();
        this.ActualBaseEntry = new Number();
        this.ActualBaseLine = new Number();
        this.DocEntry = new Number();
        this.Surpluses = new Number();
        this.DefectAndBreakup = new Number();
        this.Shortages = new Number();
        this.ConsiderQuantity = new String();
        this.PartialRetirement = new String();
        this.RetirementQuantity = new Number();
        this.RetirementAPC = new Number();
        this.ThirdParty = new String();
        this.ExpenseType = new String();
        this.ReceiptNumber = new String();
        this.ExpenseOperationType = new String();
        this.FederalTaxID = new String();
        this.GrossProfit = new Number();
        this.GrossProfitFC = new Number();
        this.GrossProfitSC = new Number();
        this.PriceSource = new String();
        this.EnableReturnCost = new String();
        this.ReturnCost = new Number();
        this.LineVendor = new String();
        this.StgSeqNum = new Number();
        this.StgEntry = new Number();
        this.StgDesc = new String();
        this.UoMEntry = new Number();
        this.UoMCode = new String();
        this.InventoryQuantity = new Number();
        this.RemainingOpenInventoryQuantity = new Number();
        this.ParentLineNum = new Number();
        this.Incoterms = new Number();
        this.TransportMode = new Number();
        this.ItemType = new String();
        this.ChangeInventoryQuantityIndependently = new String();
        this.FreeOfChargeBP = new String();
        this.SACEntry = new Number();
        this.HSNEntry = new Number();
        this.GrossPrice = new Number();
        this.GrossTotal = new Number();
        this.GrossTotalFC = new Number();
        this.GrossTotalSC = new Number();
        this.NCMCode = new Number();
        this.ShipToCode = new String();
        this.ShipToDescription = new String();
        this.ShipFromCode = new String();
        this.ShipFromDescription = new String();
        this.ExternalCalcTaxRate = new Number();
        this.ExternalCalcTaxAmount = new Number();
        this.ExternalCalcTaxAmountFC = new Number();
        this.ExternalCalcTaxAmountSC = new Number();
        this.LineTaxJurisdictions = [LineTaxJurisdiction];
        this.GeneratedAssets = [GeneratedAsset];
        this.DocumentLineAdditionalExpenses = [DocumentLineAdditionalExpense];
        this.WithholdingTaxLines = [WithholdingTaxLine];
        this.SerialNumbers = [SerialNumber];
        this.BatchNumbers = [BatchNumber];
        this.DocumentLinesBinAllocations = [DocumentLinesBinAllocation];
    }
    LineNum;
    ItemCode;
    ItemDescription;
    Quantity;
    ShipDate;
    Price;
    PriceAfterVAT;
    Currency;
    Rate;
    DiscountPercent;
    VendorNum;
    SerialNum;
    WarehouseCode;
    SalesPersonCode;
    CommisionPercent;
    TreeType;
    AccountCode;
    UseBaseUnits;
    SupplierCatNum;
    CostingCode;
    ProjectCode;
    BarCode;
    VatGroup;
    Height1;
    Hight1Unit;
    Height2;
    Height2Unit;
    Lengh1;
    Lengh1Unit;
    Lengh2;
    Lengh2Unit;
    Weight1;
    Weight1Unit;
    Weight2;
    Weight2Unit;
    Factor1;
    Factor2;
    Factor3;
    Factor4;
    BaseType;
    BaseEntry;
    BaseLine;
    Volume;
    VolumeUnit;
    Width1;
    Width1Unit;
    Width2;
    Width2Unit;
    Address;
    TaxCode;
    TaxType;
    TaxLiable;
    PickStatus;
    PickQuantity;
    PickListIdNumber;
    OriginalItem;
    BackOrder;
    FreeText;
    ShippingMethod;
    POTargetNum;
    POTargetEntry;
    POTargetRowNum;
    CorrectionInvoiceItem;
    CorrInvAmountToStock;
    CorrInvAmountToDiffAcct;
    AppliedTax;
    AppliedTaxFC;
    AppliedTaxSC;
    WTLiable;
    DeferredTax;
    EqualizationTaxPercent;
    TotalEqualizationTax;
    TotalEqualizationTaxFC;
    TotalEqualizationTaxSC;
    NetTaxAmount;
    NetTaxAmountFC;
    NetTaxAmountSC;
    MeasureUnit;
    UnitsOfMeasurment;
    LineTotal;
    TaxPercentagePerRow;
    TaxTotal;
    ConsumerSalesForecast;
    ExciseAmount;
    TaxPerUnit;
    TotalInclTax;
    CountryOrg;
    SWW;
    TransactionType;
    DistributeExpense;
    RowTotalFC;
    RowTotalSC;
    LastBuyInmPrice;
    LastBuyDistributeSumFc;
    LastBuyDistributeSumSc;
    LastBuyDistributeSum;
    StockDistributesumForeign;
    StockDistributesumSystem;
    StockDistributesum;
    StockInmPrice;
    PickStatusEx;
    TaxBeforeDPM;
    TaxBeforeDPMFC;
    TaxBeforeDPMSC;
    CFOPCode;
    CSTCode;
    Usage;
    TaxOnly;
    VisualOrder;
    BaseOpenQuantity;
    UnitPrice;
    LineStatus;
    PackageQuantity;
    Text;
    LineType;
    COGSCostingCode;
    COGSAccountCode;
    ChangeAssemlyBoMWarehouse;
    GrossBuyPrice;
    GrossBase;
    GrossProfitTotalBasePrice;
    CostingCode2;
    CostingCode3;
    CostingCode4;
    CostingCode5;
    ItemDetails;
    LocationCode;
    ActualDeliveryDate;
    RemainingOpenQuantity;
    OpenAmount;
    OpenAmountFC;
    OpenAmountSC;
    ExLineNo;
    RequiredDate;
    RequiredQuantity;
    COGSCostingCode2;
    COGSCostingCode3;
    COGSCostingCode4;
    COGSCostingCode5;
    CSTforIPI;
    CSTforPIS;
    CSTforCOFINS;
    CreditOriginCode;
    WithoutInventoryMovement;
    AgreementNo;
    AgreementRowNumber;
    ActualBaseEntry;
    ActualBaseLine;
    DocEntry;
    Surpluses;
    DefectAndBreakup;
    Shortages;
    ConsiderQuantity;
    PartialRetirement;
    RetirementQuantity;
    RetirementAPC;
    ThirdParty;
    ExpenseType;
    ReceiptNumber;
    ExpenseOperationType;
    FederalTaxID;
    GrossProfit;
    GrossProfitFC;
    GrossProfitSC;
    PriceSource;
    EnableReturnCost;
    ReturnCost;
    LineVendor;
    StgSeqNum;
    StgEntry;
    StgDesc;
    UoMEntry;
    UoMCode;
    InventoryQuantity;
    RemainingOpenInventoryQuantity;
    ParentLineNum;
    Incoterms;
    TransportMode;
    ItemType;
    ChangeInventoryQuantityIndependently;
    FreeOfChargeBP;
    SACEntry;
    HSNEntry;
    GrossPrice;
    GrossTotal;
    GrossTotalFC;
    GrossTotalSC;
    NCMCode;
    ShipToCode;
    ShipToDescription;
    ShipFromCode;
    ShipFromDescription;
    ExternalCalcTaxRate;
    ExternalCalcTaxAmount;
    ExternalCalcTaxAmountFC;
    ExternalCalcTaxAmountSC;
    LineTaxJurisdictions;
    GeneratedAssets;
    DocumentLineAdditionalExpenses;
    WithholdingTaxLines;
    SerialNumbers;
    BatchNumbers;
    DocumentLinesBinAllocations;
}

module.exports = DocumentLine;